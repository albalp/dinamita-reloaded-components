"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkinput_form"] = self["webpackChunkinput_form"] || []).push([["node_modules_windowed-observable_dist_windowed-observable_esm_js"],{

/***/ "./node_modules/windowed-observable/dist/windowed-observable.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/windowed-observable/dist/windowed-observable.esm.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Observable\": function() { return /* binding */ Observable; }\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar EVENTS = '__events__';\nvar SHARED = '__shared__';\nvar OBSERVERS = '__observers__';\nvar Observable = /*#__PURE__*/function () {\n  function Observable(namespace) {\n    this.dispatch = this.publish;\n    Observable.initialize();\n    this.namespace = namespace;\n  } // istanbul ignore next\n\n\n  Observable.initialize = function initialize() {\n    if (!window[SHARED]) {\n      var _window$SHARED;\n\n      window[SHARED] = (_window$SHARED = {}, _window$SHARED[EVENTS] = {}, _window$SHARED[OBSERVERS] = {}, _window$SHARED);\n    }\n\n    if (!window[SHARED][EVENTS]) {\n      window[SHARED][EVENTS] = {};\n    }\n\n    if (!window[SHARED][OBSERVERS]) {\n      window[SHARED][OBSERVERS] = {};\n    }\n  };\n\n  var _proto = Observable.prototype;\n\n  _proto.getEvents = function getEvents() {\n    return this.events;\n  };\n\n  _proto.getLastEvent = function getLastEvent() {\n    var events = this.events;\n\n    if (!events.length) {\n      return;\n    }\n\n    var lastEvent = events[events.length - 1];\n    return lastEvent;\n  };\n\n  _proto.publish = function publish(data) {\n    var events = this.events;\n    var lastEvent = this.getLastEvent();\n    this.observers.forEach(function (observer) {\n      return observer(data, {\n        events: events,\n        lastEvent: lastEvent\n      });\n    });\n    this.events.push(data);\n  };\n\n  _proto.subscribe = function subscribe(observer) {\n    this.observers = this.observers.concat(observer);\n  };\n\n  _proto.unsubscribe = function unsubscribe(observer) {\n    this.observers = this.observers.filter(function (obs) {\n      return obs !== observer;\n    });\n  };\n\n  _proto.clear = function clear() {\n    var events = this.events;\n    var lastEvent = this.getLastEvent();\n    this.observers.forEach(function (observer) {\n      return observer(undefined, {\n        events: events,\n        lastEvent: lastEvent\n      });\n    });\n    this.events = [];\n    this.observers = [];\n  };\n\n  _createClass(Observable, [{\n    key: \"namespace\",\n    set: function set(namespace) {\n      this._namespace = namespace; // istanbul ignore next\n\n      if (!this.events) this.events = []; // istanbul ignore next\n\n      if (!this.observers) this.observers = [];\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return window[SHARED][EVENTS][this._namespace];\n    },\n    set: function set(newEvents) {\n      window[SHARED][EVENTS][this._namespace] = newEvents;\n    }\n  }, {\n    key: \"observers\",\n    get: function get() {\n      return window[SHARED][OBSERVERS][this._namespace];\n    },\n    set: function set(newObservers) {\n      window[SHARED][OBSERVERS][this._namespace] = newObservers;\n    }\n  }]);\n\n  return Observable;\n}();\n\n\n//# sourceMappingURL=windowed-observable.esm.js.map\n\n\n//# sourceURL=webpack://input_form/./node_modules/windowed-observable/dist/windowed-observable.esm.js?");

/***/ })

}]);